#+TITLE: Athena

* Overview
Athena is a set of Spark jobs that process information from the `matches` table in Cassandra and write aggregated data to a results table. These jobs are all packaged into one Scala JAR and are run on Amazon's Elastic MapReduce.

* Champion aggregation
A champion's statistics can be represented by one large JSON blob stored in Cassandra.

It is generated with the following steps:

1. Bans per champion are calculated per team. 
2. Participants are grouped by champion. There can only be one champion of a type per game.
3. Participant lists are aggregated into ChampionTotals objects. These are just sums over the participant data.
4. Above information is combined with total count to produce rates in terms of percentage.
5. All information is stored in a Champion object.
6. Data is written as a JSON blob to Cassandra.

* Filtering
Athena uses the concept of "filters" to allow deeper analysis into the data.

Every permutation of filters is calculated to form aggregates which are later processed by derivers.

1. Matches are filtered and grouped by filter.
3. Participants are filtered and grouped by filter.

* (DEPRECATED, PLEASE IGNORE) Jobs

Jobs can roughly be categorized into two categories: periodic and on-demand.

** Periodic
Periodic jobs include the following. They may be merged into the same job.

*** Champion averages
This includes things such as:
- Average CS
- Average damage dealth
- Win rate

*** Champion distributions
Distributions show a histogram of two values plotted together of which one axis (the X axis) is discrete. These can include the following:
- Win rate per patch
- Win rate per amount of player experience

** On-demand
On-demand jobs include the following:

*** Player champion scores
A player can have a score for each champion based on what they do.

*** Player suggestions
A player may have suggestions, e.g. ward more at this location because you always get ganked here.
